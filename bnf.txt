





statement
expression                  ::= <expression>
                              | <SYMBOL>
                              | <NUMERIC>
                              | <STRING>
                              | <function call>

expression-statement        ::= <statement> | <expression>

function call               ::= <identifier> "(" <list> ")"
array literal               ::= "[" <list> "]"
namespace literal           ::= "{" <list> "}"

list                        ::= <expression-statement> { "," <expression-statement> }


        foo(a: Int, b: String, c: Object)
        foo(a, b, c)
        foo[i]
        [ a, b, c ]
        { a = 1, b = 2, c = 3 }

        a: Int, b: String, c: Object          ============          a = 1, b = 2, c = 3
        a, b, c


binary operation            ::= <operand> <operator> <operand>
unary operation             ::= <prefix unary operation> | <postfix unary operation>

prefix unary operation      ::= <unary operator> <operand>
postfix unary operation     ::= <operand> <unary operator>
unary operator              ::= ~ ! @ # $ ++ --

assignment                  ::= <identifier> <assignment operator> <expression> ;
assignment operator         ::= = := += -= *= /= %= ^= &= |= >>= <<=
operand                     ::= <SYMBOL> | <NUMERIC> | <STRING>
identifier ::= <SYMBOL>

// primitives
SYMBOL      ::= (taken for granted)
OPERATOR    ::= (taken for granted)
NUMERIC     ::= (taken for granted)
STRING      ::= (taken for granted)

